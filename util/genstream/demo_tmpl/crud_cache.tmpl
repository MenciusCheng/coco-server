{{- $obj := .Obj -}}
{{- $UName := sToUCamel $obj.tableName -}}
{{- $LName := sToLCamel $obj.tableName -}}
const (
	cache{{ $UName }}LogList       = "activity:{{ $LName }}:logList:%s"                  // {{ $obj.comment }} 记录列表缓存 15 md5
{{- range $index, $row := .Obj.rows }}
    {{- if eq .type "lock" }}
	cache{{ $UName }}{{ sToUp0 .name }}Lock = "activity:{{ $LName }}:{{ .name }}Lock:%d_%d_%d" // {{ $obj.comment }} {{ .comment }} 子活动ID_榜单ID_group
    {{- end }}
{{- end }}
)

type {{ $LName }}Cache struct {
}

var {{ $UName }}Cache = new({{ $LName }}Cache)

func (c *{{ $LName }}Cache) GetLogList(ctx context.Context, md5Str string) (*pb.List{{ $UName }}RecordRes, error) {
	key := fmt.Sprintf(cache{{ $UName }}LogList, md5Str)
	b, err := uredis.GetString(db.RedisCon2, key)
	if err == redis.Nil {
		return nil, nil
	}
	if err != nil {
		xlog.Warn(ctx, "GetString failed", zap.String("md5Str", md5Str), zap.Error(err))
		return nil, err
	}
	if b == nil {
		return nil, nil
	}
	res := new(pb.List{{ $UName }}RecordRes)
	err = json.Unmarshal(b, res)
	if err != nil {
		xlog.Warn(ctx, "Unmarshal failed", zap.String("md5Str", md5Str), zap.Error(err))
		return nil, err
	}
	return res, nil
}

func (c *{{ $LName }}Cache) SetLogList(ctx context.Context, md5Str string, data interface{}) error {
	key := fmt.Sprintf(cache{{ $UName }}LogList, md5Str)
	b, _ := json.Marshal(data)
	err := uredis.SetString(db.RedisCon2, key, b, 15)
	if err != nil {
		return err
	}
	return nil
}

{{- range $index, $row := .Obj.rows }}
    {{- if eq .type "lock" }}
func (c *{{ $LName }}Cache) Has{{ sToUp0 .name }}Lock(ctx context.Context, relId int32, rankConfId int32, group int64) bool {
	key := fmt.Sprintf(cache{{ $UName }}{{ sToUp0 .name }}Lock, relId, rankConfId, group)
	num, err := db.RedisCon2.Get(key).Int64()
	if err != nil {
		return false
	}
	return num > 0
}

func (c *{{ $LName }}Cache) Lock{{ sToUp0 .name }}Lock(ctx context.Context, relId int32, rankConfId int32, group int64, nowSec, expire int64) bool {
	key := fmt.Sprintf(cache{{ $UName }}{{ sToUp0 .name }}Lock, relId, rankConfId, group)
	b, err := db.RedisCon2.SetNX(key, nowSec, time.Duration(expire)*time.Second).Result()
	if err != nil {
		return false
	}
	return b
}
    {{- end }}
{{- end }}
